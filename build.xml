<?xml version="1.0" encoding="UTF-8"?>
<project name="Jason Scheduler API" basedir="." default="install">

    <if>
        <available file="build.properties"/>
        <then>
            <property file="build.properties"/>
        </then>
        <else>
            <echo msg="No build.properties file detected... OK. Skipping" level="verbose" />
        </else>
    </if>

    <property name="dir.base" value="${project.basedir}" />
    <property name="dir.src" value="${project.basedir}/src"/>
    <property name="dir.public" value="${project.basedir}/public"/>

    <property name="dir.build" value="${project.basedir}/build"/>
    <property name="dir.docs" value="${dir.build}/docs"/>
    <property name="dir.docs.phpdoc" value="${dir.docs}/phpdoc"/>
    <property name="dir.reports" value="${dir.build}/logs"/>
    <property name="dir.reports.phpmetric" value="${dir.reports}/phpmetrics"/>
    <property name="dir.reports.coverage" value="${dir.reports}/coverage"/>
    <property name="dir.vendor" value="${project.basedir}/vendor" />
    <property name="bin.composer.failMessage" value="Could not find composer. Please make a composer.phar executable available either in path or project root. See: http://getcomposer.org/download/ for details."/>

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${dir.src}">
        <include name="**/*.php"/>
    </fileset>

    <!-- Default target -->
    <target name="main">
        <echo msg="See:"/>
        <echo msg=" * phing -l"/>
    </target>

    <!-- Composite targets -->
    <target name="install" description="Install the entire project except database">
        <phingcall target="folders:create" />
        <phingcall target="build:htaccess" />
        <phingcall target="build:config" />
        <phingcall target="composer:install" />
    </target>

    <target name="build:db" description="Build up empty database">
        <phingcall target="migrate" />
        <phingcall target="db:seed" />
    </target>

    <target name="uninstall" description="Uninstall the entire project">
        <phingcall target="migrate:reset" />
        <phingcall target="build:clean" />
    </target>

    <!--
       Check Target
       Runs all quality check sub-targets
   -->
    <target name="check" description="Runs all quality check sub-targets" >
        <phingcall target="check:phpmetrics" />
        <phingcall target="check:cs" />
        <phingcall target="check:cpd" />
        <phingcall target="check:md" />
        <phingcall target="test" />
        <phingcall target="test:coverage" />
        <phingcall target="doc:phpdoc" />
    </target>

    <!--******************************************************************************************-->

    <!-- Create .htaccess files -->
    <target name="build:htaccess">
        <if>
            <isset property="project.application-environment"/>
            <then>
                <phingcall target="build:htaccess:from-params" />
            </then>
            <else>
                <phingcall target="build:htaccess:from-prompt" />
            </else>
        </if>
    </target>

    <!-- Htaccess file from user prompt, and build.properties file -->
    <target name="build:htaccess:from-prompt">
        <input propertyName="project.application-environment"
               defaultValue="prod" promptChar="?">Application environment
        </input>

        <input propertyName="project.rewrite-base"
               defaultValue="/" promptChar="?">Application Rewrite base path
        </input>

        <copy file="${dir.public}/.htaccess.dist" tofile="${dir.public}/.htaccess"
              overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="APP_ENV" value="${project.application-environment}" />
                    <token key="REWRITE_BASE" value="${project.rewrite-base}" />
                </replacetokens>
            </filterchain>
        </copy>

        <copy file="${dir.base}/build.properties.dist" tofile="${dir.base}/build.properties">
            <filterchain>
                <replacetokens>
                    <token key="APP_ENV" value="${project.application-environment}" />
                    <token key="REWRITE_BASE" value="${project.rewrite-base}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!-- Htaccess file from a preset parameter -->
    <target name="build:htaccess:from-params">
        <copy file="${dir.public}/.htaccess.dist" tofile="${dir.public}/.htaccess" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="APP_ENV" value="${project.application-environment}" />
                    <token key="REWRITE_BASE" value="${project.rewrite-base}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!--Build the private config file-->
    <target name="build:config" depends="build:htaccess">

        <if>
            <available file="build.properties"/>
            <then>
                <property file="build.properties"/>
            </then>
            <else>
                <fail>Local build.properties has not been created correctly</fail>
            </else>
        </if>

        <input propertyName="config.config_database_connection"
               defaultValue="mysql" promptChar="?">Database Connection
        </input>
        <input propertyName="config.config_host"
               defaultValue="mysql" promptChar="?">Database Host
        </input>
        <input propertyName="config.config_database_name"
               defaultValue="scheduler_api_dev" promptChar="?">Database Name
        </input>
        <input propertyName="config.config_username"
               defaultValue="scheduler_api_dev" promptChar="?">Database Username
        </input>
        <input propertyName="config.config_password"
               defaultValue="scheduler_api_dev" promptChar="?">Database Password
        </input>

        <copy file="${dir.base}/.env.dist" tofile="${dir.base}/.env"
              overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="APP_ENV" value="${project.application-environment}" />
                    <token key="DB_CONNECTION" value="${config.config_database_connection}" />
                    <token key="DB_HOST" value="${config.config_host}" />
                    <token key="DB_NAME" value="${config.config_database_name}" />
                    <token key="DB_USERNAME" value="${config.config_username}" />
                    <token key="DB_PASSWORD" value="${config.config_password}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!--Uninstall the htaccess file-->
    <target name="htaccess:uninstall">
        <delete file="${dir.public}/.htaccess" verbose="true" />
    </target>

    <!--Uninstall the build.properties file-->
    <target name="build.properties:uninstall">
        <delete file="${dir.base}/build.properties" verbose="true" />
    </target>

    <!-- Run migrations -->
    <target name="migrate">
        <exec passthru="true" checkreturn="true" command=""/>
    </target>

    <!--Reset migrations-->
    <target name="migrate:reset">
        <exec passthru="true" checkreturn="true" command=""/>
    </target>

    <!-- Seed database -->
    <target name="db:seed">
        <exec passthru="true" checkreturn="true" command=""/>
    </target>

    <!-- Run all tests -->
    <target name="test">
        <exec passthru="true" checkreturn="true" command="vendor/bin/phpunit"/>
    </target>

    <!-- Run all tests with code coverage -->
    <target name="test:coverage">
        <exec passthru="true" checkreturn="true" command="vendor/bin/phpunit --coverage-html ${dir.reports.coverage}"/>
    </target>

    <!-- Composer install -->
    <target name="composer:install" depends="detect-composerbin">
        <exec passthru="true" checkreturn="true" command="${bin.composer} install --verbose --no-interaction"/>
    </target>

    <!--Composer Update-->
    <target name="composer:update" depends="detect-composerbin">
        <exec passthru="true" checkreturn="true" command="${bin.composer} update --verbose --no-interaction"/>
    </target>

    <!-- Composer dump-autoload -->
    <target name="build:dependencies:cache"
            depends="detect-composerbin">
        <exec passthru="true" checkreturn="true" command="${bin.composer} dump-autoload --optimize" />
    </target>

    <!-- PHP Metrics -->
    <target name="check:phpmetrics" >
        <exec passthru="true" checkreturn="true" command="vendor/bin/phpmetrics --report-html=${dir.reports.phpmetric}/choice.html ${dir.src}" />
    </target>

    <!-- PSR2 Codesniffer -->
    <target name="check:cs">
        <echo msg="Checking coding standard ..."/>
        <exec passthru="true" checkreturn="false" command="vendor/bin/phpcs -s -p --standard=PSR2 --report-full=${dir.reports}/checkstyle.txt ${dir.src}" />
    </target>

    <!-- copy/paste detector -->
    <target name="check:cpd">
        <echo msg="Checking similar code blocks ..."/>
        <exec passthru="true" checkreturn="false" command="vendor/bin/phpcpd --log-pmd=${dir.reports}/pmd-cpd.xml ${dir.src}" />
    </target>

    <target name="check:dcd">
        <echo msg="Checking for dead code ..."/>
        <exec passthru="true" checkreturn="false" command="vendor/bin/phpdcd ${dir.src}" />
    </target>

    <!-- Mess detector -->
    <target name="check:md">
        <echo msg="Generating mess detector code metrics ..."/>
        <exec passthru="true" checkreturn="false" command="vendor/bin/phpmd ${dir.src} html codesize,unusedcode,design,naming --reportfile ${dir.reports}/pmd.html --suffixes .php" />
    </target>

    <!-- PHPDOC API documentation target -->
    <target name="doc:phpdoc">
        <echo msg="Generating API documentation with PHPDoc..."/>
        <exec passthru="true" checkreturn="false" command="./phpDocumentor.phar -d ${dir.src} -t ${dir.docs.phpdoc}" />
    </target>

    <!--Create Upload folder-->
    <target name="folders:create">
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.docs}" />
        <mkdir dir="${dir.docs.phpdoc}" />
        <mkdir dir="${dir.reports}" />
        <mkdir dir="${dir.reports.phpmetric}" />
        <mkdir dir="${dir.reports.coverage}" />
    </target>

    <!--Clean the necessary files-->
    <target name="build:clean">
        <echo msg="Cleaning build directories ..."/>
        <delete dir="${dir.vendor}" verbose="true"/>
        <delete dir="${dir.build}" verbose="true" />
        <delete file="${dir.base}/.env" />
        <phingcall target="htaccess:uninstall" />
        <phingcall target="build.properties:uninstall" />
    </target>

    <!-- Internal target to get the correct composer bin file to use
         First try composer.phar in the project directory
         Then try 'composer.phar' or 'composer' in the path, using `which`
         -->
    <target name="detect-composerbin" hidden="true">
        <if>
            <available file="${bin.composer}"/>
            <else>
                <exec command="which composer.phar" outputProperty="bin.composer"/>
                <if>
                    <equals arg1="${bin.composer}" arg2=""/>
                    <then>
                        <exec command="which composer" outputProperty="bin.composer"/>
                        <if>
                            <equals arg1="${bin.composer}" arg2=""/>
                            <then>
                                <fail message="${bin.composer.failMessage}"/>
                            </then>
                        </if>
                    </then>
                </if>
            </else>
        </if>
        <echo msg="Using composer at '${bin.composer}'"/>
    </target>

</project>